/**
 * Sistema de Eventos de Turno
 * Executa a√ß√µes autom√°ticas quando o turno avan√ßa
 */

import { db } from '../services/firebase.js';
import espionageOperationsSystem from './espionageOperationsSystem.js';
import intelligenceAgencySystem from './intelligenceAgencySystem.js';

class TurnEventsSystem {
  constructor() {
    this.lastProcessedTurn = 0;
  }

  /**
   * Processa todos os eventos do turno
   */
  async processTurnEvents(currentTurn) {
    // Evitar processar o mesmo turno duas vezes
    if (currentTurn === this.lastProcessedTurn) {
      return;
    }

    console.log(`[TurnEvents] Processando eventos do turno #${currentTurn}`);

    try {
      // 1. Progredir todas as opera√ß√µes de espionagem ativas
      await this.progressAllEspionageOperations(currentTurn);

      // 2. Atualizar or√ßamentos das ag√™ncias (cobrar custos anuais)
      // await this.updateAgencyBudgets(currentTurn);

      this.lastProcessedTurn = currentTurn;
      console.log(`[TurnEvents] Eventos do turno #${currentTurn} processados com sucesso`);

    } catch (error) {
      console.error('[TurnEvents] Erro ao processar eventos do turno:', error);
    }
  }

  /**
   * Progride todas as opera√ß√µes de espionagem ativas
   */
  async progressAllEspionageOperations(currentTurn) {
    try {
      console.log('[TurnEvents] Progredindo opera√ß√µes de espionagem...');

      // Buscar todas as opera√ß√µes ativas
      const snapshot = await db.collection('espionage_operations')
        .where('active', '==', true)
        .get();

      if (snapshot.empty) {
        console.log('[TurnEvents] Nenhuma opera√ß√£o ativa encontrada');
        return;
      }

      const operations = snapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      }));

      console.log(`[TurnEvents] ${operations.length} opera√ß√£o(√µes) ativa(s) encontrada(s)`);

      // Processar cada opera√ß√£o
      for (const operation of operations) {
        try {
          // Buscar dados da ag√™ncia
          const agencySnap = await db.collection('agencies').doc(operation.agencyId).get();
          if (!agencySnap.exists) {
            console.warn(`[TurnEvents] Ag√™ncia ${operation.agencyId} n√£o encontrada`);
            continue;
          }

          const agency = { id: agencySnap.id, ...agencySnap.data() };

          // Buscar dados dos pa√≠ses
          const spyCountrySnap = await db.collection('paises').doc(operation.spyCountryId).get();
          const targetCountrySnap = await db.collection('paises').doc(operation.targetCountryId).get();

          if (!spyCountrySnap.exists || !targetCountrySnap.exists) {
            console.warn(`[TurnEvents] Pa√≠ses n√£o encontrados para opera√ß√£o ${operation.id}`);
            continue;
          }

          const spyCountry = { id: spyCountrySnap.id, ...spyCountrySnap.data() };
          const targetCountry = { id: targetCountrySnap.id, ...targetCountrySnap.data() };

          // Progredir opera√ß√£o
          const result = await espionageOperationsSystem.progressOperation(
            operation.id,
            agency,
            targetCountry,
            spyCountry,
            currentTurn
          );

          if (result.success) {
            console.log(
              `[TurnEvents] Opera√ß√£o ${operation.id} progredida: ` +
              `${result.succeeded ? 'SUCESSO' : 'FALHA'} | ` +
              `Fase ${result.newPhase} | ` +
              `Progresso: ${Math.round(result.newProgress)}% | ` +
              `${result.detected ? '‚ö†Ô∏è DETECTADO' : '‚úì N√£o detectado'}`
            );

            // Criar notifica√ß√£o para o jogador espi√£o
            if (result.succeeded || result.detected) {
              await this.createOperationNotification(operation, result, spyCountry);
            }
          }

        } catch (error) {
          console.error(`[TurnEvents] Erro ao processar opera√ß√£o ${operation.id}:`, error);
        }
      }

      console.log('[TurnEvents] Todas as opera√ß√µes foram processadas');

    } catch (error) {
      console.error('[TurnEvents] Erro ao buscar opera√ß√µes:', error);
    }
  }

  /**
   * Cria notifica√ß√£o sobre progresso da opera√ß√£o
   */
  async createOperationNotification(operation, result, spyCountry) {
    try {
      const notification = {
        countryId: operation.spyCountryId,
        type: 'espionage_progress',
        title: result.detected ? '‚ö†Ô∏è Opera√ß√£o Detectada!' : 'üïµÔ∏è Progresso de Espionagem',
        message: result.detected
          ? `Sua opera√ß√£o em ${operation.targetCountryName} foi detectada! Risco de exposi√ß√£o aumentado.`
          : result.succeeded
            ? `Opera√ß√£o em ${operation.targetCountryName} progrediu para Fase ${result.newPhase}. Intel: ${result.intelLevel}%`
            : `Opera√ß√£o em ${operation.targetCountryName} n√£o progrediu neste turno.`,
        data: {
          operationId: operation.id,
          targetCountry: operation.targetCountryName,
          phase: result.newPhase,
          intelLevel: result.intelLevel,
          detected: result.detected,
          succeeded: result.succeeded
        },
        read: false,
        createdAt: new Date().toISOString()
      };

      // Salvar no Firestore (cole√ß√£o de notifica√ß√µes)
      // await db.collection('notifications').add(notification);

      // Por enquanto, apenas log
      console.log('[TurnEvents] Notifica√ß√£o criada:', notification.title);

    } catch (error) {
      console.error('[TurnEvents] Erro ao criar notifica√ß√£o:', error);
    }
  }

  /**
   * Atualiza or√ßamentos das ag√™ncias (cobra custos anuais)
   */
  async updateAgencyBudgets(currentTurn) {
    try {
      console.log('[TurnEvents] Atualizando or√ßamentos das ag√™ncias...');

      // Buscar todas as ag√™ncias ativas
      const snapshot = await db.collection('agencies').get();

      for (const doc of snapshot.docs) {
        const agency = { id: doc.id, ...doc.data() };

        // Buscar pa√≠s da ag√™ncia
        const countrySnap = await db.collection('paises').doc(agency.countryId).get();
        if (!countrySnap.exists) continue;

        const country = { id: countrySnap.id, ...countrySnap.data() };

        // Recalcular or√ßamento nacional dispon√≠vel
        const availableBudget = intelligenceAgencySystem.calculateBudget(country);

        // Verificar se pa√≠s ainda pode pagar o or√ßamento da ag√™ncia
        if (availableBudget < agency.budget) {
          console.warn(
            `[TurnEvents] ${country.Pais} n√£o tem or√ßamento suficiente ` +
            `para manter ag√™ncia (necess√°rio: $${agency.budget}, dispon√≠vel: $${availableBudget})`
          );
          // Opcionalmente: reduzir tier da ag√™ncia ou desativar
        }
      }

    } catch (error) {
      console.error('[TurnEvents] Erro ao atualizar or√ßamentos:', error);
    }
  }

  /**
   * Inicializa o sistema e monitora mudan√ßas de turno
   */
  init(currentTurn) {
    this.lastProcessedTurn = currentTurn - 1; // Permitir processar turno atual
    console.log(`[TurnEvents] Sistema inicializado no turno #${currentTurn}`);
  }
}

// Singleton
const turnEventsSystem = new TurnEventsSystem();
export default turnEventsSystem;
