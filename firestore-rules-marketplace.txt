// Regras de Segurança Firestore para Marketplace
// Adicionar estas regras ao arquivo firestore.rules existente

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // === MARKETPLACE OFFERS ===
    match /marketplace_offers/{offerId} {
      // Leitura: Qualquer usuário autenticado pode ver ofertas ativas
      allow read: if request.auth != null
                  && resource.data.status == 'active'
                  && resource.data.expires_at > request.time;

      // Criação: Apenas o próprio jogador pode criar ofertas para seu país
      allow create: if request.auth != null
                    && request.auth.uid == resource.data.player_id
                    && isValidCountryPlayer(resource.data.country_id, request.auth.uid)
                    && isValidOfferData(resource.data);

      // Atualização: Apenas o criador pode atualizar (quantidade, status)
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.player_id
                    && isValidOfferUpdate(request.resource.data, resource.data);

      // Deleção: Apenas o criador pode deletar suas próprias ofertas
      allow delete: if request.auth != null
                    && request.auth.uid == resource.data.player_id;
    }

    // === MARKETPLACE TRANSACTIONS ===
    match /marketplace_transactions/{transactionId} {
      // Leitura: Apenas vendedor e comprador podem ver a transação
      allow read: if request.auth != null
                  && (request.auth.uid == resource.data.seller_player_id
                     || request.auth.uid == resource.data.buyer_player_id);

      // Criação: Apenas compradores podem criar transações
      allow create: if request.auth != null
                    && request.auth.uid == resource.data.buyer_player_id
                    && isValidCountryPlayer(resource.data.buyer_country_id, request.auth.uid)
                    && isValidTransactionData(resource.data);

      // Atualização: Vendedor e comprador podem atualizar status
      allow update: if request.auth != null
                    && (request.auth.uid == resource.data.seller_player_id
                       || request.auth.uid == resource.data.buyer_player_id)
                    && isValidTransactionUpdate(request.resource.data, resource.data);

      // Deleção: Não permitir deleção de transações (histórico)
      allow delete: if false;
    }

    // === MARKETPLACE EMBARGOES ===
    match /marketplace_embargoes/{embargoId} {
      // Leitura: Qualquer jogador pode ver embargos ativos
      allow read: if request.auth != null
                  && resource.data.status == 'active';

      // Criação: Apenas jogadores podem criar embargos para seu país
      allow create: if request.auth != null
                    && request.auth.uid == resource.data.created_by_player_id
                    && isValidCountryPlayer(resource.data.embargo_country_id, request.auth.uid)
                    && isValidEmbargoData(resource.data);

      // Atualização: Apenas criador pode atualizar embargos
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.created_by_player_id
                    && isValidEmbargoUpdate(request.resource.data, resource.data);

      // Deleção: Apenas criador pode deletar embargos
      allow delete: if request.auth != null
                    && request.auth.uid == resource.data.created_by_player_id;
    }

    // === MARKETPLACE ORDERS ===
    match /marketplace_orders/{orderId} {
      // Leitura: Apenas o criador pode ver suas ordens
      allow read: if request.auth != null
                  && request.auth.uid == resource.data.player_id;

      // Criação: Apenas jogadores podem criar ordens para seu país
      allow create: if request.auth != null
                    && request.auth.uid == resource.data.player_id
                    && isValidCountryPlayer(resource.data.country_id, request.auth.uid)
                    && isValidOrderData(resource.data);

      // Atualização: Apenas criador pode atualizar suas ordens
      allow update: if request.auth != null
                    && request.auth.uid == resource.data.player_id
                    && isValidOrderUpdate(request.resource.data, resource.data);

      // Deleção: Apenas criador pode deletar suas ordens
      allow delete: if request.auth != null
                    && request.auth.uid == resource.data.player_id;
    }

    // === FUNÇÕES DE VALIDAÇÃO ===

    // Verificar se o usuário é o jogador do país especificado
    function isValidCountryPlayer(countryId, userId) {
      return exists(/databases/$(database)/documents/usuarios/$(userId))
             && get(/databases/$(database)/documents/usuarios/$(userId)).data.paisId == countryId;
    }

    // Validar dados de oferta
    function isValidOfferData(data) {
      return data.keys().hasAll(['type', 'category', 'title', 'quantity', 'price_per_unit', 'country_id', 'player_id'])
             && data.type in ['sell', 'buy']
             && data.category in ['resources', 'vehicles', 'naval']
             && data.title is string && data.title.size() >= 3
             && data.quantity is number && data.quantity > 0
             && data.price_per_unit is number && data.price_per_unit > 0
             && data.status == 'active'
             && data.created_at is timestamp
             && data.expires_at is timestamp
             && data.expires_at > request.time;
    }

    // Validar atualização de oferta
    function isValidOfferUpdate(newData, oldData) {
      return newData.player_id == oldData.player_id // Não pode mudar proprietário
             && newData.country_id == oldData.country_id // Não pode mudar país
             && newData.created_at == oldData.created_at // Não pode mudar data criação
             && newData.type == oldData.type // Não pode mudar tipo
             && newData.category == oldData.category // Não pode mudar categoria
             && (newData.quantity <= oldData.quantity || oldData.status == 'active') // Quantidade só pode diminuir ou ser igual
             && newData.status in ['active', 'completed', 'cancelled', 'expired'];
    }

    // Validar dados de transação
    function isValidTransactionData(data) {
      return data.keys().hasAll(['offer_id', 'seller_country_id', 'buyer_country_id', 'seller_player_id', 'buyer_player_id'])
             && data.quantity is number && data.quantity > 0
             && data.price_per_unit is number && data.price_per_unit > 0
             && data.total_value is number && data.total_value > 0
             && data.status == 'pending'
             && data.created_at is timestamp
             && data.delivery_deadline is timestamp
             && data.delivery_deadline > request.time;
    }

    // Validar atualização de transação
    function isValidTransactionUpdate(newData, oldData) {
      return newData.offer_id == oldData.offer_id // Não pode mudar oferta
             && newData.seller_player_id == oldData.seller_player_id // Não pode mudar vendedor
             && newData.buyer_player_id == oldData.buyer_player_id // Não pode mudar comprador
             && newData.quantity == oldData.quantity // Não pode mudar quantidade
             && newData.price_per_unit == oldData.price_per_unit // Não pode mudar preço
             && newData.created_at == oldData.created_at // Não pode mudar data criação
             && newData.status in ['pending', 'confirmed', 'processing', 'completed', 'cancelled']
             && (newData.status != oldData.status || newData.delivery_status != oldData.delivery_status); // Deve haver mudança de status
    }

    // Validar dados de embargo
    function isValidEmbargoData(data) {
      return data.keys().hasAll(['embargo_country_id', 'target_country_id', 'type', 'created_by_player_id'])
             && data.embargo_country_id != data.target_country_id // Não pode embargar a si mesmo
             && data.type in ['full', 'partial']
             && data.status == 'active'
             && data.created_at is timestamp
             && (data.expires_at == null || data.expires_at > request.time);
    }

    // Validar atualização de embargo
    function isValidEmbargoUpdate(newData, oldData) {
      return newData.embargo_country_id == oldData.embargo_country_id // Não pode mudar país aplicador
             && newData.target_country_id == oldData.target_country_id // Não pode mudar país alvo
             && newData.created_by_player_id == oldData.created_by_player_id // Não pode mudar criador
             && newData.created_at == oldData.created_at // Não pode mudar data criação
             && newData.status in ['active', 'expired', 'lifted'];
    }

    // Validar dados de ordem
    function isValidOrderData(data) {
      return data.keys().hasAll(['type', 'category', 'item_id', 'quantity', 'country_id', 'player_id'])
             && data.type in ['buy', 'sell']
             && data.category in ['resources', 'vehicles', 'naval']
             && data.quantity is number && data.quantity > 0
             && data.status == 'active'
             && data.created_at is timestamp
             && data.executions_count == 0;
    }

    // Validar atualização de ordem
    function isValidOrderUpdate(newData, oldData) {
      return newData.country_id == oldData.country_id // Não pode mudar país
             && newData.player_id == oldData.player_id // Não pode mudar jogador
             && newData.created_at == oldData.created_at // Não pode mudar data criação
             && newData.status in ['active', 'paused', 'completed', 'cancelled']
             && newData.executions_count >= oldData.executions_count; // Contador só pode aumentar
    }
  }
}