import{L as M}from"./firebase-COmVF2I9.js";const l={BASE_CONSUMPTION_PER_MILLION:{Graos:150,Combustivel:50,Metais:30,Carvao:40,Energia:100},DEVELOPMENT_MULTIPLIERS:{ultraDeveloped:{threshold:2e3,multiplier:2.5},highlyDeveloped:{threshold:1200,multiplier:2},developed:{threshold:800,multiplier:1.5},moderate:{threshold:500,multiplier:1.2},developing:{threshold:200,multiplier:1},underdeveloped:{threshold:0,multiplier:.7}},URBANIZATION_MODIFIERS:{Combustivel:.02,Energia:.015,Graos:-.005,Metais:.01},INDUSTRIAL_MODIFIERS:{Combustivel:.03,Metais:.04,Carvao:.025,Energia:.02},TECHNOLOGY_EFFICIENCY:{Combustivel:.008,Metais:.006,Carvao:.01,Energia:.007,Graos:.004},CLIMATE_MODIFIERS:{cold:{Combustivel:1.4,Carvao:1.6},temperate:{Combustivel:1,Carvao:1},warm:{Combustivel:.8,Carvao:.6},hot:{Combustivel:.6,Carvao:.4}},MILITARY_MODIFIERS:{atWar:{Combustivel:2,Metais:1.8,Graos:1.3},mobilized:{Combustivel:1.4,Metais:1.3,Graos:1.2},peace:{Combustivel:1,Metais:1,Graos:1}}},E={cold:["URSS","Canadá","Finlândia","Suécia","Noruega","Islândia","Dinamarca","Polônia","Tchecoslováquia","Mongólia"],temperate:["Estados Unidos","Reino Unido","França","Alemanha","Itália","Espanha","Portugal","Holanda","Bélgica","Suíça","Áustria","Hungria","Romênia","Bulgária","Iugoslávia","Coreia do Sul","Coreia do Norte","Japão","China","Argentina","Chile","Uruguai"],warm:["Brasil","México","Venezuela","Colômbia","Equador","Peru","Bolívia","Paraguai","Guatemala","Cuba","Índia","Paquistão","Bangladesh","Birmânia","Tailândia","Vietnã","Filipinas","Indonésia","Malásia","Turquia","Síria","Líbano","Israel","Jordânia","Irã","Afeganistão","Marrocos","Argélia","Tunísia"],hot:["Arábia Saudita","Kuwait","Iraque","Líbia","Egito","Sudão","Etiópia","Quênia","Tanzânia","Somália","Chade","Nigéria","Mali","Níger","Austrália","Sri Lanka","Emirados Árabes Unidos"]};class b{static calculateCountryConsumption(a){try{const e=parseFloat(a.Populacao)||1,t=parseFloat(a.PIBPerCapita)||500,o=parseFloat(a.Urbanizacao)||30,i=parseFloat(a.Tecnologia)||20,r=a.Pais||a.Nome||"Desconhecido",n=this.calculateBaseConsumption(e),c=this.getDevelopmentMultiplier(t),m=this.calculateUrbanizationModifiers(o),v=this.calculateIndustrialModifiers(i),C=this.calculateTechnologyEfficiency(i),p=this.getClimateModifiers(r),h=l.MILITARY_MODIFIERS.peace,d={};return["Graos","Combustivel","Metais","Carvao","Energia"].forEach(s=>{let u=n[s]*c;m[s]&&(u*=m[s]),v[s]&&(u*=v[s]),C[s]&&(u*=C[s]),p[s]&&(u*=p[s]),h[s]&&(u*=h[s]),d[s]=Math.round(u)}),d._metadata={population:e,pibPerCapita:t,developmentLevel:this.getDevelopmentLevel(t),climateZone:this.getClimateZone(r),devMultiplier:c,calculatedAt:new Date().toISOString()},d}catch(e){return M.error(`Erro ao calcular consumo para ${a.Pais}:`,e),this.getDefaultConsumption()}}static calculateBaseConsumption(a){const e=a/1e6,t=l.BASE_CONSUMPTION_PER_MILLION;return{Graos:Math.round(t.Graos*e),Combustivel:Math.round(t.Combustivel*e),Metais:Math.round(t.Metais*e),Carvao:Math.round(t.Carvao*e),Energia:Math.round(t.Energia*e)}}static getDevelopmentMultiplier(a){const e=l.DEVELOPMENT_MULTIPLIERS;return a>=e.ultraDeveloped.threshold?e.ultraDeveloped.multiplier:a>=e.highlyDeveloped.threshold?e.highlyDeveloped.multiplier:a>=e.developed.threshold?e.developed.multiplier:a>=e.moderate.threshold?e.moderate.multiplier:a>=e.developing.threshold?e.developing.multiplier:e.underdeveloped.multiplier}static calculateUrbanizationModifiers(a){const e=l.URBANIZATION_MODIFIERS;return{Combustivel:1+e.Combustivel*a,Energia:1+e.Energia*a,Graos:1+e.Graos*a,Metais:1+e.Metais*a}}static calculateIndustrialModifiers(a){const e=l.INDUSTRIAL_MODIFIERS;return{Combustivel:1+e.Combustivel*a,Metais:1+e.Metais*a,Carvao:1+e.Carvao*a,Energia:1+e.Energia*a}}static calculateTechnologyEfficiency(a){const e=l.TECHNOLOGY_EFFICIENCY;return{Graos:1-e.Graos*a,Combustivel:1-e.Combustivel*a,Metais:1-e.Metais*a,Carvao:1-e.Carvao*a,Energia:1-e.Energia*a}}static getClimateModifiers(a){const e=this.getClimateZone(a);return l.CLIMATE_MODIFIERS[e]||l.CLIMATE_MODIFIERS.temperate}static getClimateZone(a){for(const[e,t]of Object.entries(E))if(t.includes(a))return e;return"temperate"}static getDevelopmentLevel(a){const e=l.DEVELOPMENT_MULTIPLIERS;return a>=e.ultraDeveloped.threshold?"Ultradesenvolvido":a>=e.highlyDeveloped.threshold?"Altamente desenvolvido":a>=e.developed.threshold?"Desenvolvido":a>=e.moderate.threshold?"Moderadamente desenvolvido":a>=e.developing.threshold?"Em desenvolvimento":"Subdesenvolvido"}static getDefaultConsumption(){return{Graos:100,Combustivel:50,Metais:30,Carvao:40,Energia:80,_metadata:{note:"Valores padrão aplicados devido a dados insuficientes"}}}static calculateResourceBalance(a){const e=this.calculateCountryConsumption(a),t={Graos:parseFloat(a.Graos)||0,Combustivel:parseFloat(a.Combustivel)||0,Metais:parseFloat(a.Metais)||0,Carvao:parseFloat(a.CarvaoSaldo)||0,Energia:parseFloat(a.EnergiaCapacidade)||0},o={};return Object.keys(t).forEach(i=>{const r=t[i],n=e[i];o[i]={stock:r,consumption:n,balance:r-n,monthsRemaining:n>0?Math.floor(r/n):999}}),o}static generateConsumptionReport(a){const e=this.calculateCountryConsumption(a),t=this.calculateResourceBalance(a);return{country:a.Pais||"Desconhecido",consumption:e,balance:t,summary:{totalResources:Object.values(e).slice(0,5).reduce((o,i)=>o+i,0),criticalResources:Object.entries(t).filter(([o,i])=>i.monthsRemaining<3).map(([o,i])=>o),surplusResources:Object.entries(t).filter(([o,i])=>i.balance>100).map(([o,i])=>o)}}}}export{b as R};
