import{L as I,n as S,d as C,k as M}from"./firebase-DhEDpEFS.js";import"./preload-helper-f85Crcwt.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-storage-compat.js";const d={BASE_CONSUMPTION_PER_MILLION:{Graos:150,Combustivel:50,Metais:30,Carvao:40,Energia:100},DEVELOPMENT_MULTIPLIERS:{ultraDeveloped:{threshold:2e3,multiplier:2.5},highlyDeveloped:{threshold:1200,multiplier:2},developed:{threshold:800,multiplier:1.5},moderate:{threshold:500,multiplier:1.2},developing:{threshold:200,multiplier:1},underdeveloped:{threshold:0,multiplier:.7}},URBANIZATION_MODIFIERS:{Combustivel:.02,Energia:.015,Graos:-.005,Metais:.01},INDUSTRIAL_MODIFIERS:{Combustivel:.03,Metais:.04,Carvao:.025,Energia:.02},TECHNOLOGY_EFFICIENCY:{Combustivel:.008,Metais:.006,Carvao:.01,Energia:.007,Graos:.004},CLIMATE_MODIFIERS:{cold:{Combustivel:1.4,Carvao:1.6},temperate:{Combustivel:1,Carvao:1},warm:{Combustivel:.8,Carvao:.6},hot:{Combustivel:.6,Carvao:.4}},MILITARY_MODIFIERS:{atWar:{Combustivel:2,Metais:1.8,Graos:1.3},mobilized:{Combustivel:1.4,Metais:1.3,Graos:1.2},peace:{Combustivel:1,Metais:1,Graos:1}}},O={cold:["URSS","Canad√°","Finl√¢ndia","Su√©cia","Noruega","Isl√¢ndia","Dinamarca","Pol√¥nia","Tchecoslov√°quia","Mong√≥lia"],temperate:["Estados Unidos","Reino Unido","Fran√ßa","Alemanha","It√°lia","Espanha","Portugal","Holanda","B√©lgica","Su√≠√ßa","√Åustria","Hungria","Rom√™nia","Bulg√°ria","Iugosl√°via","Coreia do Sul","Coreia do Norte","Jap√£o","China","Argentina","Chile","Uruguai"],warm:["Brasil","M√©xico","Venezuela","Col√¥mbia","Equador","Peru","Bol√≠via","Paraguai","Guatemala","Cuba","√çndia","Paquist√£o","Bangladesh","Birm√¢nia","Tail√¢ndia","Vietn√£","Filipinas","Indon√©sia","Mal√°sia","Turquia","S√≠ria","L√≠bano","Israel","Jord√¢nia","Ir√£","Afeganist√£o","Marrocos","Arg√©lia","Tun√≠sia"],hot:["Ar√°bia Saudita","Kuwait","Iraque","L√≠bia","Egito","Sud√£o","Eti√≥pia","Qu√™nia","Tanz√¢nia","Som√°lia","Chade","Nig√©ria","Mali","N√≠ger","Austr√°lia","Sri Lanka","Emirados √Årabes Unidos"]};class h{static calculateCountryConsumption(o){try{const e=parseFloat(o.Populacao)||1,r=parseFloat(o.PIBPerCapita)||500,n=parseFloat(o.Urbanizacao)||30,s=parseFloat(o.Tecnologia)||20,a=o.Pais||o.Nome||"Desconhecido",t=this.calculateBaseConsumption(e),i=this.getDevelopmentMultiplier(r),c=this.calculateUrbanizationModifiers(n),l=this.calculateIndustrialModifiers(s),p=this.calculateTechnologyEfficiency(s),g=this.getClimateModifiers(a),f=d.MILITARY_MODIFIERS.peace,E={};return["Graos","Combustivel","Metais","Carvao","Energia"].forEach(m=>{let v=t[m]*i;c[m]&&(v*=c[m]),l[m]&&(v*=l[m]),p[m]&&(v*=p[m]),g[m]&&(v*=g[m]),f[m]&&(v*=f[m]),E[m]=Math.round(v)}),E._metadata={population:e,pibPerCapita:r,developmentLevel:this.getDevelopmentLevel(r),climateZone:this.getClimateZone(a),devMultiplier:i,calculatedAt:new Date().toISOString()},E}catch(e){return I.error(`Erro ao calcular consumo para ${o.Pais}:`,e),this.getDefaultConsumption()}}static calculateBaseConsumption(o){const e=o/1e6,r=d.BASE_CONSUMPTION_PER_MILLION;return{Graos:Math.round(r.Graos*e),Combustivel:Math.round(r.Combustivel*e),Metais:Math.round(r.Metais*e),Carvao:Math.round(r.Carvao*e),Energia:Math.round(r.Energia*e)}}static getDevelopmentMultiplier(o){const e=d.DEVELOPMENT_MULTIPLIERS;return o>=e.ultraDeveloped.threshold?e.ultraDeveloped.multiplier:o>=e.highlyDeveloped.threshold?e.highlyDeveloped.multiplier:o>=e.developed.threshold?e.developed.multiplier:o>=e.moderate.threshold?e.moderate.multiplier:o>=e.developing.threshold?e.developing.multiplier:e.underdeveloped.multiplier}static calculateUrbanizationModifiers(o){const e=d.URBANIZATION_MODIFIERS;return{Combustivel:1+e.Combustivel*o,Energia:1+e.Energia*o,Graos:1+e.Graos*o,Metais:1+e.Metais*o}}static calculateIndustrialModifiers(o){const e=d.INDUSTRIAL_MODIFIERS;return{Combustivel:1+e.Combustivel*o,Metais:1+e.Metais*o,Carvao:1+e.Carvao*o,Energia:1+e.Energia*o}}static calculateTechnologyEfficiency(o){const e=d.TECHNOLOGY_EFFICIENCY;return{Graos:1-e.Graos*o,Combustivel:1-e.Combustivel*o,Metais:1-e.Metais*o,Carvao:1-e.Carvao*o,Energia:1-e.Energia*o}}static getClimateModifiers(o){const e=this.getClimateZone(o);return d.CLIMATE_MODIFIERS[e]||d.CLIMATE_MODIFIERS.temperate}static getClimateZone(o){for(const[e,r]of Object.entries(O))if(r.includes(o))return e;return"temperate"}static getDevelopmentLevel(o){const e=d.DEVELOPMENT_MULTIPLIERS;return o>=e.ultraDeveloped.threshold?"Ultradesenvolvido":o>=e.highlyDeveloped.threshold?"Altamente desenvolvido":o>=e.developed.threshold?"Desenvolvido":o>=e.moderate.threshold?"Moderadamente desenvolvido":o>=e.developing.threshold?"Em desenvolvimento":"Subdesenvolvido"}static getDefaultConsumption(){return{Graos:100,Combustivel:50,Metais:30,Carvao:40,Energia:80,_metadata:{note:"Valores padr√£o aplicados devido a dados insuficientes"}}}static calculateResourceBalance(o){const e=this.calculateCountryConsumption(o),r={Graos:parseFloat(o.Graos)||0,Combustivel:parseFloat(o.Combustivel)||0,Metais:parseFloat(o.Metais)||0,Carvao:parseFloat(o.CarvaoSaldo)||0,Energia:parseFloat(o.EnergiaCapacidade)||0},n={};return Object.keys(r).forEach(s=>{const a=r[s],t=e[s];n[s]={stock:a,consumption:t,balance:a-t,monthsRemaining:t>0?Math.floor(a/t):999}}),n}static generateConsumptionReport(o){const e=this.calculateCountryConsumption(o),r=this.calculateResourceBalance(o);return{country:o.Pais||"Desconhecido",consumption:e,balance:r,summary:{totalResources:Object.values(e).slice(0,5).reduce((n,s)=>n+s,0),criticalResources:Object.entries(r).filter(([n,s])=>s.monthsRemaining<3).map(([n,s])=>n),surplusResources:Object.entries(r).filter(([n,s])=>s.balance>100).map(([n,s])=>n)}}}}async function U(){try{if(!await S("Aplicar Consumo de Recursos","Esta a√ß√£o ir√° calcular e definir o consumo mensal de recursos para todos os pa√≠ses baseado em sua popula√ß√£o, PIB per capita, urbaniza√ß√£o e industrializa√ß√£o. Esta opera√ß√£o pode ser executada m√∫ltiplas vezes. Continuar?","Sim, aplicar consumos","Cancelar")){C("info","Opera√ß√£o cancelada pelo usu√°rio.");return}C("info","Iniciando c√°lculo de consumo de recursos..."),console.log("=== CALCULANDO CONSUMO DE RECURSOS ===");const o=await M.collection("paises").get(),e=M.batch(),r=[];let n=0;o.forEach(s=>{const a=s.data(),t=a.Pais||a.Nome||s.id;try{const i=h.calculateCountryConsumption(a),c=h.calculateResourceBalance(a),l=h.generateConsumptionReport(a),p={ConsumoGraos:i.Graos,ConsumoCombustivel:i.Combustivel,ConsumoMetais:i.Metais,ConsumoCarvao:i.Carvao,ConsumoEnergia:i.Energia,ConsumoCalculado:{timestamp:i._metadata.calculatedAt,developmentLevel:i._metadata.developmentLevel,climateZone:i._metadata.climateZone,multiplier:i._metadata.devMultiplier}};e.update(s.ref,p),n++,r.push({country:t,consumption:i,balance:c,report:l}),console.log(`${t}:`,{PIB_per_capita:i._metadata.pibPerCapita,desenvolvimento:i._metadata.developmentLevel,clima:i._metadata.climateZone,consumo:{Graos:i.Graos,Combustivel:i.Combustivel,Metais:i.Metais,Carvao:i.Carvao,Energia:i.Energia},recursos_criticos:l.summary.criticalResources,recursos_surplus:l.summary.surplusResources})}catch(i){console.error(`Erro ao calcular consumo para ${t}:`,i)}}),n>0?(await e.commit(),C("success",`Consumo calculado para ${n} pa√≠ses!`),b(r),console.log(`‚úÖ Consumo aplicado com sucesso para ${n} pa√≠ses`)):C("warning","Nenhum pa√≠s foi processado.")}catch(u){console.error("Erro ao aplicar consumo:",u),C("error",`Erro: ${u.message}`)}}function b(u){console.log(`
=== ESTAT√çSTICAS DE CONSUMO ===`);const o=u.map(a=>({country:a.country,totalConsumption:a.consumption.Graos+a.consumption.Combustivel+a.consumption.Metais+a.consumption.Carvao+a.consumption.Energia,consumption:a.consumption,developmentLevel:a.consumption._metadata.developmentLevel})).sort((a,t)=>t.totalConsumption-a.totalConsumption);console.log(`
üèÜ TOP 10 MAIORES CONSUMIDORES:`),o.slice(0,10).forEach((a,t)=>{console.log(`${t+1}. ${a.country} - Total: ${a.totalConsumption} (${a.developmentLevel})`)});const e={};u.forEach(a=>{const t=a.consumption._metadata.developmentLevel;e[t]||(e[t]=[]),e[t].push(a)}),console.log(`
üìä CONSUMO M√âDIO POR N√çVEL DE DESENVOLVIMENTO:`),Object.entries(e).forEach(([a,t])=>{const i={Graos:Math.round(t.reduce((c,l)=>c+l.consumption.Graos,0)/t.length),Combustivel:Math.round(t.reduce((c,l)=>c+l.consumption.Combustivel,0)/t.length),Metais:Math.round(t.reduce((c,l)=>c+l.consumption.Metais,0)/t.length)};console.log(`${a} (${t.length} pa√≠ses):`,i)});const r=u.filter(a=>a.report.summary.criticalResources.length>0);r.length>0&&(console.log(`
‚ö†Ô∏è PA√çSES COM RECURSOS CR√çTICOS (< 3 meses):`),r.forEach(a=>{console.log(`${a.country}: ${a.report.summary.criticalResources.join(", ")}`)}));const n=u.filter(a=>a.report.summary.surplusResources.length>0);n.length>0&&(console.log(`
‚úÖ PA√çSES COM SUPER√ÅVIT (> 100 unidades):`),n.slice(0,10).forEach(a=>{console.log(`${a.country}: ${a.report.summary.surplusResources.join(", ")}`)}));const s={};u.forEach(a=>{const t=a.consumption._metadata.climateZone;s[t]||(s[t]=[]),s[t].push(a)}),console.log(`
üå°Ô∏è CONSUMO M√âDIO POR ZONA CLIM√ÅTICA:`),Object.entries(s).forEach(([a,t])=>{const i=Math.round(t.reduce((l,p)=>l+p.consumption.Combustivel,0)/t.length),c=Math.round(t.reduce((l,p)=>l+p.consumption.Carvao,0)/t.length);console.log(`${a} (${t.length} pa√≠ses): Combust√≠vel ${i}, Carv√£o ${c}`)})}async function F(u=3){try{console.log(`
=== SIMULA√á√ÉO DE ${u} TURNOS ===`);const o=await M.collection("paises").get(),e=[];o.forEach(n=>{const s=n.data(),a=s.Pais||s.Nome||n.id,t=h.calculateCountryConsumption(s),i={country:a,initialStocks:{Graos:parseFloat(s.Graos)||0,Combustivel:parseFloat(s.Combustivel)||0,Metais:parseFloat(s.Metais)||0,Carvao:parseFloat(s.CarvaoSaldo)||0},monthlyConsumption:{Graos:t.Graos,Combustivel:t.Combustivel,Metais:t.Metais,Carvao:t.Carvao},afterTurns:{}};Object.keys(i.initialStocks).forEach(c=>{const l=i.initialStocks[c]-i.monthlyConsumption[c]*u;i.afterTurns[c]=Math.max(0,l)}),e.push(i)});const r=e.filter(n=>Object.values(n.afterTurns).some(s=>s===0));console.log(`
üö® PA√çSES EM CRISE AP√ìS ${u} TURNOS:`),r.slice(0,10).forEach(n=>{const s=Object.entries(n.afterTurns).filter(([a,t])=>t===0).map(([a,t])=>a);console.log(`${n.country}: ${s.join(", ")} esgotados`)}),C("success",`Simula√ß√£o conclu√≠da: ${r.length} pa√≠ses teriam recursos esgotados`)}catch(o){console.error("Erro na simula√ß√£o:",o),C("error","Erro na simula√ß√£o: "+o.message)}}export{U as applyResourceConsumption,F as simulateConsumptionTurns};
