import{L as P,n as O,d as E,k as f}from"./firebase-DhEDpEFS.js";import"./preload-helper-f85Crcwt.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-storage-compat.js";const p={BASE_PRODUCTION_PER_MILLION:{Graos:200,Combustivel:20,Metais:15,Carvao:25,Energia:80},DEVELOPMENT_MULTIPLIERS:{ultraDeveloped:{threshold:2e3,multiplier:3},highlyDeveloped:{threshold:1200,multiplier:2.5},developed:{threshold:800,multiplier:2},moderate:{threshold:500,multiplier:1.5},developing:{threshold:200,multiplier:1},underdeveloped:{multiplier:.6}},URBANIZATION_MODIFIERS:{Combustivel:.015,Metais:.012,Energia:.02,Graos:-.012},GRAIN_PRODUCTION_FACTORS:{RURAL_PRODUCTIVITY_BASE:250,TECHNOLOGY_EFFICIENCY:.025,DEVELOPMENT_BONUS:.001},TECHNOLOGY_MULTIPLIERS:{Graos:.015,Combustivel:.02,Metais:.018,Carvao:.012,Energia:.025},GEOGRAPHIC_MODIFIERS:{oil_rich:{countries:["Venezuela","Arábia Saudita","Kuwait","Iraque","Estados Unidos","URSS","Irã"],modifier:{Combustivel:2.5}},coal_rich:{countries:["Estados Unidos","Reino Unido","Alemanha","URSS","China","Polônia"],modifier:{Carvao:2}},mineral_rich:{countries:["Estados Unidos","URSS","Canadá","Austrália","Brasil","África do Sul"],modifier:{Metais:1.8}},agricultural:{countries:["Estados Unidos","URSS","Argentina","Brasil","Canadá","Austrália","França","Ucrânia"],modifier:{Graos:1.8}},super_agricultural:{countries:["URSS","Estados Unidos"],modifier:{Graos:2.2}},industrialized:{countries:["Estados Unidos","Reino Unido","Alemanha","França","URSS","Japão"],modifier:{Energia:1.4}}},CLIMATE_PRODUCTION_MODIFIERS:{cold:{Graos:.8,Energia:1.2},temperate:{Graos:1,Energia:1},warm:{Graos:1.1,Energia:.9},hot:{Graos:.7,Energia:.8}}},I={cold:["URSS","Canadá","Finlândia","Suécia","Noruega","Islândia","Dinamarca","Polônia","Tchecoslováquia","Mongólia"],temperate:["Estados Unidos","Reino Unido","França","Alemanha","Itália","Espanha","Portugal","Holanda","Bélgica","Suíça","Áustria","Hungria","Romênia","Bulgária","Iugoslávia","Coreia do Sul","Coreia do Norte","Japão","China","Argentina","Chile","Uruguai"],warm:["Brasil","México","Venezuela","Colômbia","Equador","Peru","Bolívia","Paraguai","Guatemala","Cuba","Índia","Paquistão","Bangladesh","Birmânia","Tailândia","Vietnã","Filipinas","Indonésia","Malásia","Turquia","Síria","Líbano","Israel","Jordânia","Irã","Afeganistão","Marrocos","Argélia","Tunísia"],hot:["Arábia Saudita","Kuwait","Iraque","Líbia","Egito","Sudão","Etiópia","Quênia","Tanzânia","Somália","Chade","Nigéria","Mali","Níger","Austrália","Sri Lanka","Emirados Árabes Unidos"]};class M{static calculateCountryProduction(a){try{const o=parseFloat(a.Populacao)||1,s=parseFloat(a.PIBPerCapita)||500,c=parseFloat(a.Urbanizacao)||30,r=parseFloat(a.Tecnologia)||20,i=a.Pais||a.Nome||"Desconhecido",t=this.calculateBaseProduction(o),e=this.getDevelopmentMultiplier(s),d=this.calculateUrbanizationModifiers(c),n=this.calculateTechnologyModifiers(r),l=this.getGeographicModifiers(i),g=this.getClimateProductionModifiers(i),h={},C=this.calculateGrainProduction(a);return h.Graos=C.production,["Combustivel","Metais","Carvao","Energia"].forEach(m=>{let v=t[m]*e;d[m]&&(v*=d[m]),n[m]&&(v*=n[m]),l[m]&&(v*=l[m]),g[m]&&(v*=g[m]),h[m]=Math.round(v)}),h._metadata={calculatedAt:new Date().toISOString(),countryName:i,population:Math.round(o),pibPerCapita:Math.round(s),developmentLevel:this.getDevelopmentLevel(s),climateZone:this.getClimateZone(i),devMultiplier:e,geographicBonuses:this.getCountryGeographicBonuses(i),grainDetails:C.metadata},h}catch(o){return P.error("Erro ao calcular produção:",o),this.getDefaultProduction()}}static calculateBaseProduction(a){const o=a/1e6,s=p.BASE_PRODUCTION_PER_MILLION;return{Graos:Math.round(s.Graos*o),Combustivel:Math.round(s.Combustivel*o),Metais:Math.round(s.Metais*o),Carvao:Math.round(s.Carvao*o),Energia:Math.round(s.Energia*o)}}static calculateGrainProduction(a){const o=parseFloat(a.Populacao)||1,s=parseFloat(a.Urbanizacao)||30,c=parseFloat(a.Tecnologia)||20,r=parseFloat(a.PIBPerCapita)||500,i=a.Pais||a.Nome||"Desconhecido",t=Math.max(10,100-s),e=o*t/100/1e6,d=p.GRAIN_PRODUCTION_FACTORS;let n=e*d.RURAL_PRODUCTIVITY_BASE;const l=1+d.TECHNOLOGY_EFFICIENCY*c;n*=l;const g=1+d.DEVELOPMENT_BONUS*r;n*=g;const h=this.getGeographicModifiers(i);h.Graos&&(n*=h.Graos);const C=this.getClimateProductionModifiers(i);return C.Graos&&(n*=C.Graos),{production:Math.round(n),metadata:{ruralPopulationPercent:Math.round(t),ruralPopulationMillions:Math.round(e*100)/100,technologyMultiplier:Math.round(l*100)/100,developmentBonus:Math.round(g*100)/100,geographicBonus:h.Graos||1,climateEffect:C.Graos||1}}}static getDevelopmentMultiplier(a){const o=p.DEVELOPMENT_MULTIPLIERS;return a>=o.ultraDeveloped.threshold?o.ultraDeveloped.multiplier:a>=o.highlyDeveloped.threshold?o.highlyDeveloped.multiplier:a>=o.developed.threshold?o.developed.multiplier:a>=o.moderate.threshold?o.moderate.multiplier:a>=o.developing.threshold?o.developing.multiplier:o.underdeveloped.multiplier}static getDevelopmentLevel(a){const o=p.DEVELOPMENT_MULTIPLIERS;return a>=o.ultraDeveloped.threshold?"Ultra Desenvolvido":a>=o.highlyDeveloped.threshold?"Muito Desenvolvido":a>=o.developed.threshold?"Desenvolvido":a>=o.moderate.threshold?"Moderado":a>=o.developing.threshold?"Em Desenvolvimento":"Subdesenvolvido"}static calculateUrbanizationModifiers(a){const o=p.URBANIZATION_MODIFIERS;return{Combustivel:1+o.Combustivel*a,Metais:1+o.Metais*a,Energia:1+o.Energia*a,Graos:1+o.Graos*a}}static calculateTechnologyModifiers(a){const o=p.TECHNOLOGY_MULTIPLIERS;return{Graos:1+o.Graos*a,Combustivel:1+o.Combustivel*a,Metais:1+o.Metais*a,Carvao:1+o.Carvao*a,Energia:1+o.Energia*a}}static getGeographicModifiers(a){const o={Graos:1,Combustivel:1,Metais:1,Carvao:1,Energia:1},s=p.GEOGRAPHIC_MODIFIERS;return["oil_rich","coal_rich","mineral_rich","agricultural","super_agricultural","industrialized"].forEach(r=>{const i=s[r];i&&i.countries.includes(a)&&Object.entries(i.modifier).forEach(([t,e])=>{o[t]=e})}),o}static getCountryGeographicBonuses(a){const o=[],s=p.GEOGRAPHIC_MODIFIERS;return Object.entries(s).forEach(([c,r])=>{if(r.countries.includes(a)){const i={oil_rich:"Rico em Petróleo",coal_rich:"Rico em Carvão",mineral_rich:"Rico em Minerais",agricultural:"Agrícola",industrialized:"Industrializado"};o.push(i[c]||c)}}),o}static getClimateProductionModifiers(a){const o=this.getClimateZone(a);return p.CLIMATE_PRODUCTION_MODIFIERS[o]||p.CLIMATE_PRODUCTION_MODIFIERS.temperate}static getClimateZone(a){for(const[o,s]of Object.entries(I))if(s.includes(a))return o;return"temperate"}static getDefaultProduction(){return{Graos:100,Combustivel:50,Metais:30,Carvao:40,Energia:80,_metadata:{calculatedAt:new Date().toISOString(),error:"Valores padrão aplicados devido a erro no cálculo"}}}static calculateResourceBalance(a){const o=this.calculateCountryProduction(a);return{Graos:o.Graos-(parseFloat(a.ConsumoGraos)||0),Combustivel:o.Combustivel-(parseFloat(a.ConsumoCombustivel)||0),Metais:o.Metais-(parseFloat(a.ConsumoMetais)||0),Carvao:o.Carvao-(parseFloat(a.ConsumoCarvao)||0),Energia:o.Energia-(parseFloat(a.ConsumoEnergia)||0)}}static generateProductionReport(a){const o=this.calculateCountryProduction(a),s=this.calculateResourceBalance(a),c=a.Pais||a.Nome||"Desconhecido",r=[],i=[];return Object.entries(s).forEach(([t,e])=>{e>100&&r.push(t),e<-50&&i.push(t)}),{country:c,production:o,balance:s,summary:{totalProduction:o.Graos+o.Combustivel+o.Metais+o.Carvao,surplusResources:r,deficitResources:i,energyBalance:s.Energia>0?"Superávit":"Déficit"},analysis:{economicLevel:o._metadata.developmentLevel,geographicBonuses:o._metadata.geographicBonuses,climateZone:o._metadata.climateZone}}}}async function N(){try{if(!await O("Aplicar Produção de Recursos","Esta ação irá calcular e definir a produção mensal de recursos para todos os países baseado em sua população, PIB per capita, tecnologia, geografia e clima. Esta operação pode ser executada múltiplas vezes. Continuar?","Sim, aplicar produção","Cancelar")){E("info","Operação cancelada pelo usuário.");return}E("info","Iniciando cálculo de produção de recursos..."),console.log("=== CALCULANDO PRODUÇÃO DE RECURSOS ===");const a=await f.collection("paises").get(),o=f.batch(),s=[];let c=0;a.forEach(r=>{const i=r.data(),t=i.Pais||i.Nome||r.id;try{const e=M.calculateCountryProduction(i),d=M.calculateResourceBalance(i),n=M.generateProductionReport(i),l={ProducaoGraos:e.Graos,ProducaoCombustivel:e.Combustivel,ProducaoMetais:e.Metais,ProducaoCarvao:e.Carvao,ProducaoEnergia:e.Energia,ProducaoCalculada:{timestamp:e._metadata.calculatedAt,developmentLevel:e._metadata.developmentLevel,climateZone:e._metadata.climateZone,multiplier:e._metadata.devMultiplier,geographicBonuses:e._metadata.geographicBonuses}};o.update(r.ref,l),c++,s.push({country:t,production:e,balance:d,report:n}),console.log(`${t}:`,{PIB_per_capita:e._metadata.pibPerCapita,desenvolvimento:e._metadata.developmentLevel,clima:e._metadata.climateZone,bonus_geograficos:e._metadata.geographicBonuses,producao:{Graos:e.Graos,Combustivel:e.Combustivel,Metais:e.Metais,Carvao:e.Carvao,Energia:e.Energia},recursos_superavit:n.summary.surplusResources,recursos_deficit:n.summary.deficitResources})}catch(e){console.error(`Erro ao calcular produção para ${t}:`,e)}}),c>0?(await o.commit(),E("success",`Produção calculada para ${c} países!`),R(s),console.log(`✅ Produção aplicada com sucesso para ${c} países`)):E("warning","Nenhum país foi processado.")}catch(u){console.error("Erro ao aplicar produção:",u),E("error",`Erro: ${u.message}`)}}function R(u){console.log(`
=== ESTATÍSTICAS DE PRODUÇÃO ===`);const a=u.map(t=>({country:t.country,totalProduction:t.production.Graos+t.production.Combustivel+t.production.Metais+t.production.Carvao+t.production.Energia,production:t.production,developmentLevel:t.production._metadata.developmentLevel})).sort((t,e)=>e.totalProduction-t.totalProduction);console.log(`
🏆 TOP 10 MAIORES PRODUTORES:`),a.slice(0,10).forEach((t,e)=>{console.log(`${e+1}. ${t.country} - Total: ${t.totalProduction} (${t.developmentLevel})`)});const o={};u.forEach(t=>{const e=t.production._metadata.developmentLevel;o[e]||(o[e]=[]),o[e].push(t)}),console.log(`
📊 PRODUÇÃO MÉDIA POR NÍVEL DE DESENVOLVIMENTO:`),Object.entries(o).forEach(([t,e])=>{const d={Graos:Math.round(e.reduce((n,l)=>n+l.production.Graos,0)/e.length),Combustivel:Math.round(e.reduce((n,l)=>n+l.production.Combustivel,0)/e.length),Metais:Math.round(e.reduce((n,l)=>n+l.production.Metais,0)/e.length),Energia:Math.round(e.reduce((n,l)=>n+l.production.Energia,0)/e.length)};console.log(`${t} (${e.length} países):`,d)});const s=u.filter(t=>t.report.summary.surplusResources.length>0);s.length>0&&(console.log(`
✅ PAÍSES COM SUPERÁVIT SIGNIFICATIVO (> 100 unidades):`),s.slice(0,15).forEach(t=>{console.log(`${t.country}: ${t.report.summary.surplusResources.join(", ")}`)}));const c=u.filter(t=>t.report.summary.deficitResources.length>0);c.length>0&&(console.log(`
⚠️ PAÍSES COM DÉFICIT (< -50 unidades):`),c.forEach(t=>{console.log(`${t.country}: ${t.report.summary.deficitResources.join(", ")}`)}));const r={};u.forEach(t=>{t.production._metadata.geographicBonuses.forEach(e=>{r[e]||(r[e]=[]),r[e].push(t.country)})}),console.log(`
🌍 PAÍSES POR VANTAGEM GEOGRÁFICA:`),Object.entries(r).forEach(([t,e])=>{console.log(`${t}: ${e.length} países - ${e.slice(0,5).join(", ")}${e.length>5?"...":""}`)});const i=u.reduce((t,e)=>t+e.balance.Energia,0);console.log(`
⚡ BALANÇO ENERGÉTICO GLOBAL: ${i>0?"+":""}${Math.round(i)} MW`)}async function U(u=6){try{console.log(`
=== SIMULAÇÃO DE PRODUÇÃO - ${u} TURNOS ===`);const a=await f.collection("paises").get(),o=[];a.forEach(r=>{const i=r.data(),t=i.Pais||i.Nome||r.id,e=M.calculateCountryProduction(i),d={Graos:parseFloat(i.ConsumoGraos)||0,Combustivel:parseFloat(i.ConsumoCombustivel)||0,Metais:parseFloat(i.ConsumoMetais)||0,Carvao:parseFloat(i.ConsumoCarvao)||0,Energia:parseFloat(i.ConsumoEnergia)||0},n={country:t,initialStocks:{Graos:parseFloat(i.Graos)||0,Combustivel:parseFloat(i.Combustivel)||0,Metais:parseFloat(i.Metais)||0,Carvao:parseFloat(i.CarvaoSaldo)||0},monthlyBalance:{},afterTurns:{}};Object.keys(n.initialStocks).forEach(l=>{const g=e[l]-d[l];n.monthlyBalance[l]=g,n.afterTurns[l]=Math.max(0,n.initialStocks[l]+g*u)}),o.push(n)});const s=o.filter(r=>Object.values(r.monthlyBalance).some(i=>i>50)),c=o.filter(r=>Object.values(r.monthlyBalance).some(i=>i<-20));console.log(`
📈 PAÍSES EM CRESCIMENTO APÓS ${u} TURNOS (balanço > +50):`),s.slice(0,10).forEach(r=>{const i=Object.entries(r.monthlyBalance).filter(([t,e])=>e>50).map(([t,e])=>t);console.log(`${r.country}: ${i.join(", ")}`)}),console.log(`
📉 PAÍSES EM DECLÍNIO APÓS ${u} TURNOS (balanço < -20):`),c.slice(0,10).forEach(r=>{const i=Object.entries(r.monthlyBalance).filter(([t,e])=>e<-20).map(([t,e])=>t);console.log(`${r.country}: ${i.join(", ")}`)}),E("success",`Simulação concluída: ${s.length} países crescendo, ${c.length} em declínio`)}catch(a){console.error("Erro na simulação:",a),E("error","Erro na simulação: "+a.message)}}export{N as applyResourceProduction,U as simulateProductionTurns};
