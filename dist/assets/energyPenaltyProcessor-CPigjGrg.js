import{L as i,g,h as c}from"./firebase-DhoRyF0N.js";import{E as m}from"./economicCalculations-EmLH2T6y.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-storage-compat.js";class h{constructor(){this.isProcessing=!1}async processAllCountries(){if(this.isProcessing){i.warn("EnergyPenaltyProcessor já está em execução");return}try{this.isProcessing=!0,i.info("Iniciando processamento de penalidades de energia...");const e=await g(),a=c.batch();let r=0;for(const s of e){const o=await this.processCountryEnergyPenalty(s);if(o.needsUpdate){const t=c.collection("paises").doc(s.id);a.update(t,o.updates),r++,o.penalty>0&&i.info(`${s.Pais}: déficit de ${o.deficitPercent}%, penalidade de -$${o.penalty.toFixed(0)}`)}}r>0?(await a.commit(),i.info(`Penalidades de energia aplicadas em ${r} países`)):i.info("Nenhum país precisou de penalidade de energia")}catch(e){i.error("Erro ao processar penalidades de energia:",e)}finally{this.isProcessing=!1}}async processCountryEnergyPenalty(e){try{const a=m.computeEnergyDemandGW(e),r=parseFloat(e.EnergiaCapacidade)||parseFloat(e.Energia?.capacidade)||0;if(r>=a.demandaGW)return{needsUpdate:!1};const o=(a.demandaGW-r)/a.demandaGW*100,t=m.computeEnergyPenalty(r,a.demandaGW),n=parseFloat(e.PIB)||0,d=n*Math.min(.02,(1-t)*.05);if(d>0){const l=Math.max(n-d,n*.98),P=l/(parseFloat(e.Populacao)||1),y=parseFloat(e.Estabilidade)||50,p=o>50?1:0,u={PIB:l,PIBPerCapita:P,"Energia.demanda":a.demandaGW,"geral.PIB":l,"geral.PIBPerCapita":P};return p>0&&(u.Estabilidade=Math.max(0,y-p),u["geral.Estabilidade"]=Math.max(0,y-p)),{needsUpdate:!0,updates:u,penalty:d,deficitPercent:o.toFixed(1)}}return{needsUpdate:!1}}catch(a){return i.error(`Erro ao processar penalidade para ${e.Pais}:`,a),{needsUpdate:!1}}}async processResourceConsumption(){try{const e=await g(),a=c.batch();let r=0;for(const s of e){if(!s.power_plants||s.power_plants.length===0)continue;const o={Carvao:parseFloat(s.CarvaoSaldo||s.Carvao||0),Combustivel:parseFloat(s.Combustivel||0),Uranio:parseFloat(s.Uranio||0)},t=m.calculateEnergyProduction(s,o);if(t.consumedResources&&Object.values(t.consumedResources).some(n=>n>0)){const n={};if(t.consumedResources.Carvao>0&&(n.CarvaoSaldo=Math.max(0,o.Carvao-t.consumedResources.Carvao)),t.consumedResources.Combustivel>0&&(n.Combustivel=Math.max(0,o.Combustivel-t.consumedResources.Combustivel)),t.consumedResources.Uranio>0&&(n.Uranio=Math.max(0,o.Uranio-t.consumedResources.Uranio)),Object.keys(n).length>0){const f=c.collection("paises").doc(s.id);a.update(f,n),r++}}}r>0&&(await a.commit(),i.info(`Consumo de recursos aplicado em ${r} países`))}catch(e){i.error("Erro ao processar consumo de recursos:",e)}}}const C=new h;async function F(){await Promise.all([C.processAllCountries(),C.processResourceConsumption()])}export{h as EnergyPenaltyProcessor,C as energyPenaltyProcessor,F as processEnergySystemTurn};
