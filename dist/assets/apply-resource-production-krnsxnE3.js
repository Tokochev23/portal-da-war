import{m as E,d,k as g}from"./firebase-DSEPx490.js";import{R as m}from"./resourceProductionCalculator-DyW2EJ2N.js";import"./preload-helper-f85Crcwt.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-storage-compat.js";async function $(){try{if(!await E("Aplicar Produ√ß√£o de Recursos","Esta a√ß√£o ir√° calcular e definir a produ√ß√£o mensal de recursos para todos os pa√≠ses baseado em sua popula√ß√£o, PIB per capita, tecnologia, geografia e clima. Esta opera√ß√£o pode ser executada m√∫ltiplas vezes. Continuar?","Sim, aplicar produ√ß√£o","Cancelar")){d("info","Opera√ß√£o cancelada pelo usu√°rio.");return}d("info","Iniciando c√°lculo de produ√ß√£o de recursos..."),console.log("=== CALCULANDO PRODU√á√ÉO DE RECURSOS ===");const i=await g.collection("paises").get(),c=g.batch(),u=[];let l=0;i.forEach(t=>{const a=t.data(),e=a.Pais||a.Nome||t.id;try{const o=m.calculateCountryProduction(a),p=m.calculateResourceBalance(a),r=m.generateProductionReport(a),n={ProducaoGraos:o.Graos,ProducaoCombustivel:o.Combustivel,ProducaoMetais:o.Metais,ProducaoCarvao:o.Carvao,ProducaoEnergia:o.Energia,ProducaoCalculada:{timestamp:o._metadata.calculatedAt,developmentLevel:o._metadata.developmentLevel,climateZone:o._metadata.climateZone,multiplier:o._metadata.devMultiplier,geographicBonuses:o._metadata.geographicBonuses}};c.update(t.ref,n),l++,u.push({country:e,production:o,balance:p,report:r}),console.log(`${e}:`,{PIB_per_capita:o._metadata.pibPerCapita,desenvolvimento:o._metadata.developmentLevel,clima:o._metadata.climateZone,bonus_geograficos:o._metadata.geographicBonuses,producao:{Graos:o.Graos,Combustivel:o.Combustivel,Metais:o.Metais,Carvao:o.Carvao,Energia:o.Energia},recursos_superavit:r.summary.surplusResources,recursos_deficit:r.summary.deficitResources})}catch(o){console.error(`Erro ao calcular produ√ß√£o para ${e}:`,o)}}),l>0?(await c.commit(),d("success",`Produ√ß√£o calculada para ${l} pa√≠ses!`),C(u),console.log(`‚úÖ Produ√ß√£o aplicada com sucesso para ${l} pa√≠ses`)):d("warning","Nenhum pa√≠s foi processado.")}catch(s){console.error("Erro ao aplicar produ√ß√£o:",s),d("error",`Erro: ${s.message}`)}}function C(s){console.log(`
=== ESTAT√çSTICAS DE PRODU√á√ÉO ===`);const i=s.map(e=>({country:e.country,totalProduction:e.production.Graos+e.production.Combustivel+e.production.Metais+e.production.Carvao+e.production.Energia,production:e.production,developmentLevel:e.production._metadata.developmentLevel})).sort((e,o)=>o.totalProduction-e.totalProduction);console.log(`
üèÜ TOP 10 MAIORES PRODUTORES:`),i.slice(0,10).forEach((e,o)=>{console.log(`${o+1}. ${e.country} - Total: ${e.totalProduction} (${e.developmentLevel})`)});const c={};s.forEach(e=>{const o=e.production._metadata.developmentLevel;c[o]||(c[o]=[]),c[o].push(e)}),console.log(`
üìä PRODU√á√ÉO M√âDIA POR N√çVEL DE DESENVOLVIMENTO:`),Object.entries(c).forEach(([e,o])=>{const p={Graos:Math.round(o.reduce((r,n)=>r+n.production.Graos,0)/o.length),Combustivel:Math.round(o.reduce((r,n)=>r+n.production.Combustivel,0)/o.length),Metais:Math.round(o.reduce((r,n)=>r+n.production.Metais,0)/o.length),Energia:Math.round(o.reduce((r,n)=>r+n.production.Energia,0)/o.length)};console.log(`${e} (${o.length} pa√≠ses):`,p)});const u=s.filter(e=>e.report.summary.surplusResources.length>0);u.length>0&&(console.log(`
‚úÖ PA√çSES COM SUPER√ÅVIT SIGNIFICATIVO (> 100 unidades):`),u.slice(0,15).forEach(e=>{console.log(`${e.country}: ${e.report.summary.surplusResources.join(", ")}`)}));const l=s.filter(e=>e.report.summary.deficitResources.length>0);l.length>0&&(console.log(`
‚ö†Ô∏è PA√çSES COM D√âFICIT (< -50 unidades):`),l.forEach(e=>{console.log(`${e.country}: ${e.report.summary.deficitResources.join(", ")}`)}));const t={};s.forEach(e=>{e.production._metadata.geographicBonuses.forEach(o=>{t[o]||(t[o]=[]),t[o].push(e.country)})}),console.log(`
üåç PA√çSES POR VANTAGEM GEOGR√ÅFICA:`),Object.entries(t).forEach(([e,o])=>{console.log(`${e}: ${o.length} pa√≠ses - ${o.slice(0,5).join(", ")}${o.length>5?"...":""}`)});const a=s.reduce((e,o)=>e+o.balance.Energia,0);console.log(`
‚ö° BALAN√áO ENERG√âTICO GLOBAL: ${a>0?"+":""}${Math.round(a)} MW`)}async function M(s=6){try{console.log(`
=== SIMULA√á√ÉO DE PRODU√á√ÉO - ${s} TURNOS ===`);const i=await g.collection("paises").get(),c=[];i.forEach(t=>{const a=t.data(),e=a.Pais||a.Nome||t.id,o=m.calculateCountryProduction(a),p={Graos:parseFloat(a.ConsumoGraos)||0,Combustivel:parseFloat(a.ConsumoCombustivel)||0,Metais:parseFloat(a.ConsumoMetais)||0,Carvao:parseFloat(a.ConsumoCarvao)||0,Energia:parseFloat(a.ConsumoEnergia)||0},r={country:e,initialStocks:{Graos:parseFloat(a.Graos)||0,Combustivel:parseFloat(a.Combustivel)||0,Metais:parseFloat(a.Metais)||0,Carvao:parseFloat(a.CarvaoSaldo)||0},monthlyBalance:{},afterTurns:{}};Object.keys(r.initialStocks).forEach(n=>{const h=o[n]-p[n];r.monthlyBalance[n]=h,r.afterTurns[n]=Math.max(0,r.initialStocks[n]+h*s)}),c.push(r)});const u=c.filter(t=>Object.values(t.monthlyBalance).some(a=>a>50)),l=c.filter(t=>Object.values(t.monthlyBalance).some(a=>a<-20));console.log(`
üìà PA√çSES EM CRESCIMENTO AP√ìS ${s} TURNOS (balan√ßo > +50):`),u.slice(0,10).forEach(t=>{const a=Object.entries(t.monthlyBalance).filter(([e,o])=>o>50).map(([e,o])=>e);console.log(`${t.country}: ${a.join(", ")}`)}),console.log(`
üìâ PA√çSES EM DECL√çNIO AP√ìS ${s} TURNOS (balan√ßo < -20):`),l.slice(0,10).forEach(t=>{const a=Object.entries(t.monthlyBalance).filter(([e,o])=>o<-20).map(([e,o])=>e);console.log(`${t.country}: ${a.join(", ")}`)}),d("success",`Simula√ß√£o conclu√≠da: ${u.length} pa√≠ses crescendo, ${l.length} em decl√≠nio`)}catch(i){console.error("Erro na simula√ß√£o:",i),d("error","Erro na simula√ß√£o: "+i.message)}}export{$ as applyResourceProduction,M as simulateProductionTurns};
