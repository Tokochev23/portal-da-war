import{db as l}from"./firebase-ep1w8F7T.js";class n{constructor(){this.docRef=l.collection("mapData").doc("worldMap")}async getAllProvinces(){try{const e=await this.docRef.get();return e.exists?e.data().provinces||{}:(console.log("Documento do mapa não existe ainda, criando..."),await this.docRef.set({provinces:{},lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:null}),{})}catch(e){return console.error("Erro ao buscar províncias:",e),{}}}async updateProvinceColor(e,r,o){try{const t=this.sanitizeProvinceId(e);return await this.docRef.update({[`provinces.${t}`]:r,lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:o}),!0}catch(t){if(t.code==="not-found"){const s=this.sanitizeProvinceId(e);return await this.docRef.set({provinces:{[s]:r},lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:o}),!0}return console.error("Erro ao atualizar cor da província:",t),!1}}async updateMultipleProvinces(e){try{const r={lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:e[0]?.narratorId||null};return e.forEach(o=>{const t=this.sanitizeProvinceId(o.id);r[`provinces.${t}`]=o.color}),await this.docRef.update(r),!0}catch(r){return console.error("Erro ao atualizar múltiplas províncias:",r),!1}}onProvincesChange(e){return this.docRef.onSnapshot(r=>{if(!r.exists){console.log("Documento do mapa não existe");return}const t=r.data().provinces||{};e(t)},r=>{console.error("Erro no listener de províncias:",r)})}async initializeMap(){try{return(await this.docRef.get()).exists||(await this.docRef.set({provinces:{},lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:null,metadata:{created:firebase.firestore.FieldValue.serverTimestamp(),version:"1.0"}}),console.log("Mapa inicializado com sucesso")),!0}catch(e){return console.error("Erro ao inicializar mapa:",e),!1}}async resetAllProvinces(e="#d1d5db",r){try{return await this.docRef.set({provinces:{},lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:r,metadata:{lastReset:firebase.firestore.FieldValue.serverTimestamp(),resetBy:r}}),!0}catch(o){return console.error("Erro ao resetar províncias:",o),!1}}async exportMapAsJSON(){try{const e=await this.getAllProvinces(),r={version:"1.0",exportDate:new Date().toISOString(),provinces:e};return JSON.stringify(r,null,2)}catch(e){return console.error("Erro ao exportar mapa:",e),null}}async importMapFromJSON(e,r){try{const o=JSON.parse(e);if(!o.provinces)throw new Error("Formato de JSON inválido");return await this.docRef.set({provinces:o.provinces,lastUpdated:firebase.firestore.FieldValue.serverTimestamp(),lastUpdatedBy:r,metadata:{imported:firebase.firestore.FieldValue.serverTimestamp(),importedBy:r,originalExportDate:o.exportDate}}),!0}catch(o){return console.error("Erro ao importar mapa:",o),!1}}sanitizeProvinceId(e){return String(e).replace(/\./g,"_").replace(/~/g,"_").replace(/\*/g,"_").replace(/\//g,"_").replace(/\[/g,"_").replace(/\]/g,"_")}async getMapStats(){try{const e=await this.getAllProvinces(),r=Object.keys(e).length,o=Object.values(e),t=new Set(o);return{totalProvinces:r,paintedProvinces:r,uniqueColors:t.size,colors:Array.from(t)}}catch(e){return console.error("Erro ao obter estatísticas:",e),null}}}const a=new n,h=Object.freeze(Object.defineProperty({__proto__:null,ProvinceService:n,provinceService:a},Symbol.toStringTag,{value:"Module"}));class p{constructor(e){this.containerId=e,this.map=null,this.geoJsonLayer=null,this.provinceColors=new Map,this.selectedColor="#FF0000",this.isNarrator=!1,this.provinces=new Map}async initialize(e=!1){if(this.isNarrator=e,!document.getElementById(this.containerId)){console.error("Container do mapa não encontrado:",this.containerId);return}this.map=L.map(this.containerId,{center:[20,0],zoom:2,minZoom:2,maxZoom:8,worldCopyJump:!0}),L.tileLayer("https://{s}.basemaps.cartocdn.com/light_nolabels/{z}/{x}/{y}{r}.png",{attribution:'&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors &copy; <a href="https://carto.com/attributions">CARTO</a>',subdomains:"abcd",maxZoom:20}).addTo(this.map),await this.loadProvinceColors(),await this.loadWorldGeoJSON(),this.setupRealtimeUpdates(),console.log("Mapa inicializado com sucesso")}async loadWorldGeoJSON(){try{const r=await(await fetch("https://raw.githubusercontent.com/nvkelso/natural-earth-vector/master/geojson/ne_10m_admin_1_states_provinces.geojson")).json();this.geoJsonLayer=L.geoJSON(r,{style:o=>this.getProvinceStyle(o),onEachFeature:(o,t)=>this.onEachProvince(o,t)}).addTo(this.map),console.log("GeoJSON carregado:",r.features.length,"províncias"),this.isNarrator&&await a.initializeMap()}catch(e){console.error("Erro ao carregar GeoJSON:",e),await this.loadSimpleCountries()}}async loadSimpleCountries(){try{const r=await(await fetch("https://raw.githubusercontent.com/datasets/geo-countries/master/data/countries.geojson")).json();this.geoJsonLayer=L.geoJSON(r,{style:o=>this.getProvinceStyle(o),onEachFeature:(o,t)=>this.onEachProvince(o,t)}).addTo(this.map),console.log("GeoJSON de países carregado:",r.features.length,"países")}catch(e){console.error("Erro ao carregar GeoJSON de países:",e)}}getProvinceId(e){return e.properties.iso_3166_2||e.properties.adm1_code||e.properties.name||e.id||`province_${Math.random().toString(36).substr(2,9)}`}getProvinceName(e){return e.properties.name||e.properties.NAME||e.properties.admin||"Província sem nome"}getProvinceStyle(e){const r=this.getProvinceId(e);return{fillColor:this.provinceColors.get(r)||"#d1d5db",weight:1,opacity:1,color:"#1f2937",fillOpacity:.7}}onEachProvince(e,r){const o=this.getProvinceId(e),t=this.getProvinceName(e);this.provinces.set(o,{feature:e,layer:r}),r.bindTooltip(t,{sticky:!0,className:"province-tooltip"});const s=this.provinceColors.get(o)||"#d1d5db";r.bindPopup(this.createPopupContent(o,t,s)),r.on({mouseover:i=>this.highlightProvince(i),mouseout:i=>this.resetHighlight(i),click:i=>this.onProvinceClick(i,o,t)})}createPopupContent(e,r,o){return`
            <div style="min-width: 200px;">
                <h3 style="margin: 0 0 8px 0; font-size: 14px; font-weight: bold;">${r}</h3>
                <div style="display: flex; align-items: center; gap: 8px; margin-bottom: 8px;">
                    <span style="font-size: 12px; color: #64748b;">Cor atual:</span>
                    <div style="width: 30px; height: 20px; background: ${o}; border: 1px solid #333; border-radius: 4px;"></div>
                </div>
                <div style="font-size: 11px; color: #94a3b8; margin-top: 4px;">
                    ID: ${e}
                </div>
            </div>
        `}highlightProvince(e){const r=e.target;r.setStyle({weight:3,color:"#fbbf24",fillOpacity:.9}),r.bringToFront()}resetHighlight(e){this.geoJsonLayer.resetStyle(e.target)}async onProvinceClick(e,r,o){if(!this.isNarrator){console.log(`Província visualizada: ${o}`);return}if(await this.paintProvince(r,this.selectedColor)){console.log(`Província ${o} pintada com ${this.selectedColor}`);const s=e.target;s.setStyle({fillColor:this.selectedColor}),s.setPopupContent(this.createPopupContent(r,o,this.selectedColor))}}async paintProvince(e,r){try{const o=firebase.auth().currentUser?.uid,t=await a.updateProvinceColor(e,r,o);return t&&this.provinceColors.set(e,r),t}catch(o){return console.error("Erro ao pintar província:",o),!1}}setSelectedColor(e){this.selectedColor=e,console.log("Cor selecionada:",e)}async loadProvinceColors(){try{const e=await a.getAllProvinces();Object.entries(e).forEach(([r,o])=>{this.provinceColors.set(r,o)}),console.log("Cores carregadas:",this.provinceColors.size,"províncias")}catch(e){console.error("Erro ao carregar cores:",e)}}setupRealtimeUpdates(){a.onProvincesChange(e=>{Object.entries(e).forEach(([r,o])=>{this.provinceColors.set(r,o);const t=this.provinces.get(r);t&&t.layer&&t.layer.setStyle({fillColor:o})}),console.log("Mapa atualizado em tempo real:",Object.keys(e).length,"províncias")})}async resetAllProvinces(e="#d1d5db"){if(!this.isNarrator)return console.log("Apenas narradores podem resetar o mapa"),!1;if(!confirm("Tem certeza que deseja resetar TODAS as províncias do mapa?"))return!1;try{const r=firebase.auth().currentUser?.uid,o=await a.resetAllProvinces(e,r);return o&&console.log("Todas as províncias resetadas"),o}catch(r){return console.error("Erro ao resetar províncias:",r),!1}}async exportAsImage(){console.log("Export de imagem será implementado")}}const u=Object.freeze(Object.defineProperty({__proto__:null,WorldMap:p},Symbol.toStringTag,{value:"Module"}));export{p as W,h as p,u as w};
