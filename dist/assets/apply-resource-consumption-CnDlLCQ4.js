import{m as v,b as m,h as d}from"./firebase-CFOznPL1.js";import{R as C}from"./resourceConsumptionCalculator-GQgKGRPk.js";import"./preload-helper-f85Crcwt.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-app-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-auth-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-firestore-compat.js";import"https://www.gstatic.com/firebasejs/10.12.2/firebase-storage-compat.js";async function y(){try{if(!await v("Aplicar Consumo de Recursos","Esta a√ß√£o ir√° calcular e definir o consumo mensal de recursos para todos os pa√≠ses baseado em sua popula√ß√£o, PIB per capita, urbaniza√ß√£o e industrializa√ß√£o. Esta opera√ß√£o pode ser executada m√∫ltiplas vezes. Continuar?","Sim, aplicar consumos","Cancelar")){m("info","Opera√ß√£o cancelada pelo usu√°rio.");return}m("info","Iniciando c√°lculo de consumo de recursos..."),console.log("=== CALCULANDO CONSUMO DE RECURSOS ===");const l=await d.collection("paises").get(),i=d.batch(),u=[];let t=0;l.forEach(s=>{const o=s.data(),e=o.Pais||o.Nome||s.id;try{const a=C.calculateCountryConsumption(o),c=C.calculateResourceBalance(o),n=C.generateConsumptionReport(o),p={ConsumoGraos:a.Graos,ConsumoCombustivel:a.Combustivel,ConsumoMetais:a.Metais,ConsumoCarvao:a.Carvao,ConsumoEnergia:a.Energia,ConsumoCalculado:{timestamp:a._metadata.calculatedAt,developmentLevel:a._metadata.developmentLevel,climateZone:a._metadata.climateZone,multiplier:a._metadata.devMultiplier}};i.update(s.ref,p),t++,u.push({country:e,consumption:a,balance:c,report:n}),console.log(`${e}:`,{PIB_per_capita:a._metadata.pibPerCapita,desenvolvimento:a._metadata.developmentLevel,clima:a._metadata.climateZone,consumo:{Graos:a.Graos,Combustivel:a.Combustivel,Metais:a.Metais,Carvao:a.Carvao,Energia:a.Energia},recursos_criticos:n.summary.criticalResources,recursos_surplus:n.summary.surplusResources})}catch(a){console.error(`Erro ao calcular consumo para ${e}:`,a)}}),t>0?(await i.commit(),m("success",`Consumo calculado para ${t} pa√≠ses!`),g(u),console.log(`‚úÖ Consumo aplicado com sucesso para ${t} pa√≠ses`)):m("warning","Nenhum pa√≠s foi processado.")}catch(r){console.error("Erro ao aplicar consumo:",r),m("error",`Erro: ${r.message}`)}}function g(r){console.log(`
=== ESTAT√çSTICAS DE CONSUMO ===`);const l=r.map(o=>({country:o.country,totalConsumption:o.consumption.Graos+o.consumption.Combustivel+o.consumption.Metais+o.consumption.Carvao+o.consumption.Energia,consumption:o.consumption,developmentLevel:o.consumption._metadata.developmentLevel})).sort((o,e)=>e.totalConsumption-o.totalConsumption);console.log(`
üèÜ TOP 10 MAIORES CONSUMIDORES:`),l.slice(0,10).forEach((o,e)=>{console.log(`${e+1}. ${o.country} - Total: ${o.totalConsumption} (${o.developmentLevel})`)});const i={};r.forEach(o=>{const e=o.consumption._metadata.developmentLevel;i[e]||(i[e]=[]),i[e].push(o)}),console.log(`
üìä CONSUMO M√âDIO POR N√çVEL DE DESENVOLVIMENTO:`),Object.entries(i).forEach(([o,e])=>{const a={Graos:Math.round(e.reduce((c,n)=>c+n.consumption.Graos,0)/e.length),Combustivel:Math.round(e.reduce((c,n)=>c+n.consumption.Combustivel,0)/e.length),Metais:Math.round(e.reduce((c,n)=>c+n.consumption.Metais,0)/e.length)};console.log(`${o} (${e.length} pa√≠ses):`,a)});const u=r.filter(o=>o.report.summary.criticalResources.length>0);u.length>0&&(console.log(`
‚ö†Ô∏è PA√çSES COM RECURSOS CR√çTICOS (< 3 meses):`),u.forEach(o=>{console.log(`${o.country}: ${o.report.summary.criticalResources.join(", ")}`)}));const t=r.filter(o=>o.report.summary.surplusResources.length>0);t.length>0&&(console.log(`
‚úÖ PA√çSES COM SUPER√ÅVIT (> 100 unidades):`),t.slice(0,10).forEach(o=>{console.log(`${o.country}: ${o.report.summary.surplusResources.join(", ")}`)}));const s={};r.forEach(o=>{const e=o.consumption._metadata.climateZone;s[e]||(s[e]=[]),s[e].push(o)}),console.log(`
üå°Ô∏è CONSUMO M√âDIO POR ZONA CLIM√ÅTICA:`),Object.entries(s).forEach(([o,e])=>{const a=Math.round(e.reduce((n,p)=>n+p.consumption.Combustivel,0)/e.length),c=Math.round(e.reduce((n,p)=>n+p.consumption.Carvao,0)/e.length);console.log(`${o} (${e.length} pa√≠ses): Combust√≠vel ${a}, Carv√£o ${c}`)})}async function R(r=3){try{console.log(`
=== SIMULA√á√ÉO DE ${r} TURNOS ===`);const l=await d.collection("paises").get(),i=[];l.forEach(t=>{const s=t.data(),o=s.Pais||s.Nome||t.id,e=C.calculateCountryConsumption(s),a={country:o,initialStocks:{Graos:parseFloat(s.Graos)||0,Combustivel:parseFloat(s.Combustivel)||0,Metais:parseFloat(s.Metais)||0,Carvao:parseFloat(s.CarvaoSaldo)||0},monthlyConsumption:{Graos:e.Graos,Combustivel:e.Combustivel,Metais:e.Metais,Carvao:e.Carvao},afterTurns:{}};Object.keys(a.initialStocks).forEach(c=>{const n=a.initialStocks[c]-a.monthlyConsumption[c]*r;a.afterTurns[c]=Math.max(0,n)}),i.push(a)});const u=i.filter(t=>Object.values(t.afterTurns).some(s=>s===0));console.log(`
üö® PA√çSES EM CRISE AP√ìS ${r} TURNOS:`),u.slice(0,10).forEach(t=>{const s=Object.entries(t.afterTurns).filter(([o,e])=>e===0).map(([o,e])=>o);console.log(`${t.country}: ${s.join(", ")} esgotados`)}),m("success",`Simula√ß√£o conclu√≠da: ${u.length} pa√≠ses teriam recursos esgotados`)}catch(l){console.error("Erro na simula√ß√£o:",l),m("error","Erro na simula√ß√£o: "+l.message)}}export{y as applyResourceConsumption,R as simulateConsumptionTurns};
