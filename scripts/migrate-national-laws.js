/**
 * @file migrate-national-laws.js
 * @description Script para migrar a base de dados de pa√≠ses, adicionando os campos necess√°rios para o novo sistema de Leis Nacionais e Exaust√£o de Guerra.
 */

import { db } from '../js/config/firebase-config.js';

/**
 * Valores padr√£o para os novos campos
 */
const DEFAULT_VALUES = {
  mobilizationLaw: 'volunteer_only',      // Lei de conscri√ß√£o inicial (Apenas Volunt√°rios)
  economicLaw: 'civilian_economy',        // Lei econ√¥mica inicial (Economia Civil)
  warExhaustion: 0,                       // Sem exaust√£o inicial
  inWarWith: [],                          // Nenhuma guerra ativa
  lawChange: null                         // Nenhuma transi√ß√£o em andamento
};

/**
 * Fun√ß√£o principal para executar a migra√ß√£o.
 */
async function migrateNationalLaws() {
  console.log('='.repeat(60));
  console.log('üîß MIGRA√á√ÉO: Sistema de Leis Nacionais e Exaust√£o de Guerra');
  console.log('='.repeat(60));
  console.log('');

  try {
    // 1. Buscar todos os pa√≠ses
    const paisesSnapshot = await db.collection('paises').get();

    if (paisesSnapshot.empty) {
      console.log('‚ö†Ô∏è  Nenhum pa√≠s encontrado na cole√ß√£o.');
      console.log('   A migra√ß√£o n√£o √© necess√°ria.');
      return;
    }

    console.log(`üìä Encontrados ${paisesSnapshot.size} pa√≠ses na base de dados.`);
    console.log('');

    // 2. Analisar quais pa√≠ses precisam de migra√ß√£o
    let needsMigration = 0;
    let alreadyMigrated = 0;
    const countriesToMigrate = [];

    paisesSnapshot.forEach(doc => {
      const countryData = doc.data();
      const countryName = countryData.Pais || countryData.Nome || doc.id;

      // Verificar quais campos est√£o faltando
      const missingFields = [];
      if (countryData.mobilizationLaw === undefined) missingFields.push('mobilizationLaw');
      if (countryData.economicLaw === undefined) missingFields.push('economicLaw');
      if (countryData.warExhaustion === undefined) missingFields.push('warExhaustion');
      if (countryData.inWarWith === undefined) missingFields.push('inWarWith');
      if (countryData.lawChange === undefined) missingFields.push('lawChange');

      if (missingFields.length > 0) {
        needsMigration++;
        countriesToMigrate.push({
          id: doc.id,
          ref: doc.ref,
          name: countryName,
          missingFields: missingFields
        });
        console.log(`‚öôÔ∏è  ${countryName}:`);
        console.log(`   Campos faltando: ${missingFields.join(', ')}`);
      } else {
        alreadyMigrated++;
        console.log(`‚úÖ ${countryName}: J√° possui todos os campos`);
      }
    });

    console.log('');
    console.log('-'.repeat(60));
    console.log(`üìà Resumo:`);
    console.log(`   Total de pa√≠ses: ${paisesSnapshot.size}`);
    console.log(`   Precisam migra√ß√£o: ${needsMigration}`);
    console.log(`   J√° migrados: ${alreadyMigrated}`);
    console.log('-'.repeat(60));
    console.log('');

    // 3. Executar migra√ß√£o se necess√°rio
    if (needsMigration === 0) {
      console.log('‚ú® Todos os pa√≠ses j√° est√£o atualizados!');
      console.log('   Nenhuma a√ß√£o necess√°ria.');
      return;
    }

    console.log(`üöÄ Iniciando migra√ß√£o de ${needsMigration} pa√≠ses...`);
    console.log('');

    // Usar batch para melhor performance (m√°ximo 500 opera√ß√µes por batch)
    const BATCH_SIZE = 500;
    let currentBatch = db.batch();
    let operationCount = 0;
    let batchCount = 0;
    let totalUpdated = 0;

    for (const country of countriesToMigrate) {
      // Criar objeto de update apenas com campos faltando
      const updates = {};

      country.missingFields.forEach(field => {
        updates[field] = DEFAULT_VALUES[field];
      });

      currentBatch.update(country.ref, updates);
      operationCount++;
      totalUpdated++;

      // Se atingiu o limite do batch, commitar e criar novo
      if (operationCount >= BATCH_SIZE) {
        await currentBatch.commit();
        batchCount++;
        console.log(`   Batch ${batchCount} commitado (${operationCount} opera√ß√µes)`);
        currentBatch = db.batch();
        operationCount = 0;
      }
    }

    // Commitar batch restante
    if (operationCount > 0) {
      await currentBatch.commit();
      batchCount++;
      console.log(`   Batch ${batchCount} commitado (${operationCount} opera√ß√µes)`);
    }

    console.log('');
    console.log('='.repeat(60));
    console.log('‚úÖ MIGRA√á√ÉO CONCLU√çDA COM SUCESSO!');
    console.log('='.repeat(60));
    console.log('');
    console.log(`üìä Estat√≠sticas:`);
    console.log(`   Pa√≠ses atualizados: ${totalUpdated}`);
    console.log(`   Batches executados: ${batchCount}`);
    console.log('');
    console.log('üìù Valores padr√£o aplicados:');
    console.log(`   mobilizationLaw: "${DEFAULT_VALUES.mobilizationLaw}" (Apenas Volunt√°rios)`);
    console.log(`   economicLaw: "${DEFAULT_VALUES.economicLaw}" (Economia Civil)`);
    console.log(`   warExhaustion: ${DEFAULT_VALUES.warExhaustion}%`);
    console.log(`   inWarWith: [] (vazio)`);
    console.log(`   lawChange: null`);
    console.log('');
    console.log('üéØ Pr√≥ximos passos:');
    console.log('   1. Execute o script setup-game-config.js se ainda n√£o fez');
    console.log('   2. Teste o sistema no painel do narrador');
    console.log('   3. Verifique se os pa√≠ses aparecem corretamente no dashboard');
    console.log('');

  } catch (error) {
    console.error('');
    console.error('‚ùå ERRO DURANTE A MIGRA√á√ÉO:');
    console.error('='.repeat(60));
    console.error(error);
    console.error('='.repeat(60));
    console.error('');
    console.error('‚ö†Ô∏è  A migra√ß√£o foi interrompida.');
    console.error('   Alguns pa√≠ses podem ter sido atualizados parcialmente.');
    console.error('   Voc√™ pode executar o script novamente com seguran√ßa.');
    console.error('');
  }
}

// Executa a fun√ß√£o principal
migrateNationalLaws();
